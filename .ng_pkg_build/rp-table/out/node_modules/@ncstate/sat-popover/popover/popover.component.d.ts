import { EventEmitter, TemplateRef, OnInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { PopoverNotificationService } from './notification.service';
export declare type SatPopoverScrollStrategy = 'noop' | 'block' | 'reposition' | 'close';
export declare type SatPopoverHorizontalAlign = 'before' | 'start' | 'center' | 'end' | 'after';
export declare type SatPopoverVerticalAlign = 'above' | 'start' | 'center' | 'end' | 'below';
export declare const VALID_SCROLL: SatPopoverScrollStrategy[];
export declare const VALID_HORIZ_ALIGN: SatPopoverHorizontalAlign[];
export declare const VALID_VERT_ALIGN: SatPopoverVerticalAlign[];
export declare class SatPopover implements OnInit {
    private _focusTrapFactory;
    private _document;
    /** Alignment of the popover on the horizontal axis. */
    horizontalAlign: SatPopoverHorizontalAlign;
    private _horizontalAlign;
    /** Alignment of the popover on the x axis. Alias for `horizontalAlign`. */
    xAlign: SatPopoverHorizontalAlign;
    /** Alignment of the popover on the vertical axis. */
    verticalAlign: SatPopoverVerticalAlign;
    private _verticalAlign;
    /** Alignment of the popover on the y axis. Alias for `verticalAlign`. */
    yAlign: SatPopoverVerticalAlign;
    /** How the popover should handle scrolling. */
    scrollStrategy: SatPopoverScrollStrategy;
    private _scrollStrategy;
    /** Whether the popover should have a backdrop (includes closing on click). */
    hasBackdrop: boolean;
    private _hasBackdrop;
    /** Custom transition to use while opening. */
    openTransition: string;
    private _openTransition;
    /** Custom transition to use while closing. */
    closeTransition: string;
    private _closeTransition;
    /** Optional backdrop class. */
    backdropClass: string;
    /** Emits when the popover is opened. */
    opened: EventEmitter<void>;
    /** Emits when the popover is closed. */
    closed: EventEmitter<any>;
    /** Emits when the popover has finished opening. */
    afterOpen: EventEmitter<void>;
    /** Emits when the popover has finished closing. */
    afterClose: EventEmitter<void>;
    /** Emits when the backdrop is clicked. */
    backdropClicked: EventEmitter<void>;
    /** Emits when a keydown event is targeted to this popover's overlay. */
    overlayKeydown: EventEmitter<KeyboardEvent>;
    /** Reference to template so it can be placed within a portal. */
    _templateRef: TemplateRef<any>;
    /** Classes to be added to the popover for setting the correct transform origin. */
    _classList: any;
    /** Whether the popover is presently open. */
    _open: boolean;
    /** Instance of notification service. Will be undefined until attached to an anchor. */
    _notifications: PopoverNotificationService;
    /** Reference to the element to build a focus trap around. */
    private _focusTrapElement;
    /** Reference to the element that was focused before opening. */
    private _previouslyFocusedElement;
    /** Reference to a focus trap around the popover. */
    private _focusTrap;
    constructor(_focusTrapFactory: FocusTrapFactory, _document: any);
    ngOnInit(): void;
    /** Open this popover. */
    open(): void;
    /** Close this popover. */
    close(value?: any): void;
    /** Toggle this popover open or closed. */
    toggle(): void;
    /** Gets whether the popover is presently open. */
    isOpen(): boolean;
    /** Gets an animation config with customized (or default) transition values. */
    _getAnimation(): {
        value: any;
        params: any;
    };
    /** Callback for when the popover is finished animating in or out. */
    _onAnimationDone(event: AnimationEvent): void;
    /** Apply alignment classes based on alignment inputs. */
    _setAlignmentClasses(horizAlign?: SatPopoverHorizontalAlign, vertAlign?: SatPopoverVerticalAlign): void;
    /** Move the focus inside the focus trap and remember where to return later. */
    private _trapFocus();
    /** Restore focus to the element focused before the popover opened. Also destroy trap. */
    private _restoreFocus();
    /** Save a reference to the element focused before the popover was opened. */
    private _savePreviouslyFocusedElement();
    /** Dispatch a notification to the notification service, if possible. */
    private _dispatchConfigNotification(notification);
    /** Dispatch a notification to the notification service and throw if unable to. */
    private _dispatchActionNotification(notification);
    /** Throws an error if the alignment is not a valid horizontalAlign. */
    private _validateHorizontalAlign(pos);
    /** Throws an error if the alignment is not a valid verticalAlign. */
    private _validateVerticalAlign(pos);
    /** Throws an error if the scroll strategy is not a valid strategy. */
    private _validateScrollStrategy(strategy);
}
